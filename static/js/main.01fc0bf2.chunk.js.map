{"version":3,"sources":["components/Form.js","components/Result.js","components/App.js","serviceWorker.js","index.js"],"names":["Form","props","react_default","a","createElement","type","placeholder","onChange","change","value","Result","_props$weather","weather","err","city","wind","temp","date","sunrise","sunset","pressure","content","sunriseTime","Date","toLocaleTimeString","sunsetTime","Fragment","className","concat","App","state","handleInputChange","e","_this","setState","target","prevProps","prevState","_this2","this","length","API","fetch","then","response","ok","Error","json","data","time","toLocaleString","main","sys","speed","catch","src_components_Form","src_components_Result","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_components_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.01fc0bf2.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./Form.css\";\n\nconst Form = props => {\n  return (\n    <form>\n      <input\n        type=\"text\"\n        placeholder=\"Wpisz miasto\"\n        onChange={props.change}\n        value={props.value}\n      />\n    </form>\n  );\n};\n\nexport default Form;\n","import React from \"react\";\nimport \"./Result.css\";\n\nconst Result = props => {\n  const {\n    err,\n    city,\n    wind,\n    temp,\n    date,\n    sunrise,\n    sunset,\n    pressure\n  } = props.weather;\n  let content = null;\n  if (!err && city) {\n    const sunriseTime = new Date(sunrise * 1000).toLocaleTimeString();\n    const sunsetTime = new Date(sunset * 1000).toLocaleTimeString();\n    content = (\n      <>\n        <h3>\n          Wyszukiwanie dla miasta <em>{city}</em>\n        </h3>\n        <p>Aktualna data i czas: {date}</p>\n        <p>Temperatura: {temp}&#176;C</p>\n        <p>Prędkość wiatru: {wind} m/s</p>\n        <p>Wschód słońca o {sunriseTime}</p>\n        <p>Zachód słońca o {sunsetTime}</p>\n        <p>Ciśnienie: {pressure} hPa</p>\n      </>\n    );\n  }\n  return (\n    <div className=\"result\">{err ? `Nie mamy w bazie ${city}` : content}</div>\n  );\n};\n\nexport default Result;\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport Form from \"./Form\";\nimport Result from \"./Result\";\n//Klucz do API\nconst keyAPI = \"209289b4718b2b5f7107d39aaf548fb0\";\n\nclass App extends Component {\n  state = {\n    value: \"\",\n    city: \"\",\n    date: \"\",\n    temp: \"\",\n    sunrise: \"\",\n    sunset: \"\",\n    wind: \"\",\n    pressure: \"\",\n    err: false\n  };\n\n  componentDidUpdate(prevProps, prevState) {\n    if (this.state.value.length === 0) return;\n    if (prevState.value !== this.state.value) {\n      const API = `http://api.openweathermap.org/data/2.5/weather?q=${\n        this.state.value\n      }&APPID=${keyAPI}&units=metric`;\n\n      fetch(API)\n        .then(response => {\n          if (response.ok) {\n            return response;\n          }\n          throw Error(\"Nie udało się!\");\n        })\n        .then(response => response.json())\n        .then(data => {\n          const time = new Date().toLocaleString();\n          this.setState(prevState => ({\n            err: false,\n            date: time,\n            temp: data.main.temp,\n            sunrise: data.sys.sunrise,\n            sunset: data.sys.sunset,\n            wind: data.wind.speed,\n            pressure: data.main.pressure,\n            city: prevState.value\n          }));\n        })\n        .catch(err => {\n          this.setState(prevState => ({\n            err: true,\n            city: prevState.value\n          }));\n        });\n    }\n  }\n\n  handleInputChange = e => {\n    this.setState({\n      value: e.target.value\n    });\n  };\n  // handleCitySubmit = e => {\n  //   e.preventDefault();\n  //   console.log(\"formularz przesłany\");\n  //   const API = `http://api.openweathermap.org/data/2.5/weather?q=${\n  //     this.state.value\n  //   }&APPID=${keyAPI}&units=metric`;\n\n  //   fetch(API)\n  //     .then(response => {\n  //       if (response.ok) {\n  //         return response;\n  //       }\n  //       throw Error(\"Nie udało się!\");\n  //     })\n  //     .then(response => response.json())\n  //     .then(data => {\n  //       const time = new Date().toLocaleString();\n  //       this.setState(prevState => ({\n  //         err: false,\n  //         date: time,\n  //         temp: data.main.temp,\n  //         sunrise: data.sys.sunrise,\n  //         sunset: data.sys.sunset,\n  //         wind: data.wind.speed,\n  //         pressure: data.main.pressure,\n  //         city: prevState.value\n  //       }));\n  //     })\n  //     .catch(err => {\n  //       this.setState(prevState => ({\n  //         err: true,\n  //         city: prevState.value\n  //       }));\n  //     });\n  // };\n  render() {\n    return (\n      <div className=\"App\">\n        <Form value={this.state.value} change={this.handleInputChange} />\n        <Result weather={this.state} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n\nserviceWorker.unregister();\n"],"sourceRoot":""}
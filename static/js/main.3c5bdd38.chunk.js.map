{"version":3,"sources":["components/Form.js","components/Result.js","components/App.js","serviceWorker.js","index.js"],"names":["Form","props","react_default","a","createElement","onSubmit","submit","type","placeholder","onChange","change","value","Result","Fragment","String","error","keyAPI","App","state","city","date","temp","sunrise","sunset","wind","pressure","err","handleInputChange","e","_this","setState","target","handleCitySubmit","preventDefault","console","log","API","concat","fetch","then","response","ok","Error","json","data","catch","className","src_components_Form","this","components_Result","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_components_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"gRAiBeA,eAdF,SAAAC,GACX,OACEC,EAAAC,EAAAC,cAAA,QAAMC,SAAUJ,EAAMK,QACpBJ,EAAAC,EAAAC,cAAA,SACEG,KAAK,OACLC,YAAY,eACZC,SAAUR,EAAMS,OAChBC,MAAOV,EAAMU,QAEfT,EAAAC,EAAAC,cAAA,oCCFSQ,EARA,SAAAX,GACb,OACEC,EAAAC,EAAAC,cAAAF,EAAAC,EAAAU,SAAA,KACEX,EAAAC,EAAAC,cAAA,SAAIU,OAAOb,EAAMc,UCAjBC,EAAS,mCA2DAC,6MAxDbC,MAAQ,CACNP,MAAO,GACPQ,KAAM,GACNC,KAAM,GACNC,KAAM,GACNC,QAAS,GACTC,OAAQ,GACRC,KAAM,GACNC,SAAU,GACVC,KAAK,KAEPC,kBAAoB,SAAAC,GAClBC,EAAKC,SAAS,CACZnB,MAAOiB,EAAEG,OAAOpB,WAGpBqB,iBAAmB,SAAAJ,GACjBA,EAAEK,iBACFC,QAAQC,IAAI,4BACZ,IAAMC,EAAG,oDAAAC,OACPR,EAAKX,MAAMP,MADJ,WAAA0B,OAECrB,EAFD,iBAITsB,MAAMF,GACHG,KAAK,SAAAC,GACJ,GAAIA,EAASC,GACX,OAAOD,EAET,MAAME,MAAM,8BAEbH,KAAK,SAAAC,GAAQ,OAAIA,EAASG,SAC1BJ,KAAK,SAAAK,GAAI,OACRf,EAAKC,SAAS,CACZJ,KAAK,MAGRmB,MAAM,SAAAnB,GACLG,EAAKC,SAAS,CACZJ,KAAK,+EAKX,OACExB,EAAAC,EAAAC,cAAA,OAAK0C,UAAU,OACb5C,EAAAC,EAAAC,cAAC2C,EAAD,CACEpC,MAAOqC,KAAK9B,MAAMP,MAClBD,OAAQsC,KAAKrB,kBACbrB,OAAQ0C,KAAKhB,mBAEf9B,EAAAC,EAAAC,cAAC6C,EAAD,CAAQlC,MAAOiC,KAAK9B,MAAMQ,cAnDhBwB,aCKEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOvD,EAAAC,EAAAC,cAACsD,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMxB,KAAK,SAAAyB,GACjCA,EAAaC","file":"static/js/main.3c5bdd38.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./Form.css\";\n\nconst Form = props => {\n  return (\n    <form onSubmit={props.submit}>\n      <input\n        type=\"text\"\n        placeholder=\"Wpisz miasto\"\n        onChange={props.change}\n        value={props.value}\n      />\n      <button>Wyszukaj miasto</button>\n    </form>\n  );\n};\n\nexport default Form;\n","import React from \"react\";\n\nconst Result = props => {\n  return (\n    <>\n      <p>{String(props.error)}</p>\n    </>\n  );\n};\n\nexport default Result;\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport Form from \"./Form\";\nimport Result from \"./Result\";\n\nconst keyAPI = \"209289b4718b2b5f7107d39aaf548fb0\";\n\nclass App extends Component {\n  state = {\n    value: \"\",\n    city: \"\",\n    date: \"\",\n    temp: \"\",\n    sunrise: \"\",\n    sunset: \"\",\n    wind: \"\",\n    pressure: \"\",\n    err: false\n  };\n  handleInputChange = e => {\n    this.setState({\n      value: e.target.value\n    });\n  };\n  handleCitySubmit = e => {\n    e.preventDefault();\n    console.log(\"formularz przesłany\");\n    const API = `http://api.openweathermap.org/data/2.5/weather?q=${\n      this.state.value\n    }&APPID=${keyAPI}&units=metric`;\n\n    fetch(API)\n      .then(response => {\n        if (response.ok) {\n          return response;\n        }\n        throw Error(\"Nie udało się!\");\n      })\n      .then(response => response.json())\n      .then(data =>\n        this.setState({\n          err: false\n        })\n      )\n      .catch(err => {\n        this.setState({\n          err: true\n        });\n      });\n  };\n  render() {\n    return (\n      <div className=\"App\">\n        <Form\n          value={this.state.value}\n          change={this.handleInputChange}\n          submit={this.handleCitySubmit}\n        />\n        <Result error={this.state.err} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n\nserviceWorker.unregister();\n"],"sourceRoot":""}